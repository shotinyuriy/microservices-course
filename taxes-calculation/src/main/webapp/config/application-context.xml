<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xmlns:jdbc="http://www.springframework.org/schema/jdbc"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
     http://www.springframework.org/schema/beans/spring-beans.xsd
     http://www.springframework.org/schema/mvc
	   http://www.springframework.org/schema/mvc/spring-mvc.xsd
	   http://www.springframework.org/schema/context
	   http://www.springframework.org/schema/context/spring-context.xsd
	   http://www.springframework.org/schema/jdbc
     http://www.springframework.org/schema/jdbc/spring-jdbc.xsd">

	<!-- enable auto scanning feature in Spring 
	The base-package is indicate where are your components stored, 
	Spring will scan this folder and find out the bean and register it in Spring container.-->
	 <!-- eg. CustomerService customerService = (CustomerService)context.getBean("customerService"); -->
	 <!-- @Component – Indicates a auto scan component.
		  @Repository – Indicates DAO component in the persistence layer.
		  @Service – Indicates a Service component in the business layer.
		  @Controller – Indicates a controller component in the presentation layer. -->
	<context:component-scan base-package="com.gridu.microservice" />

	<!-- Configures the @Controller programming model -->
	<!-- This tag registers the DefaultAnnotationHandlerMapping and AnnotationMethodHandlerAdapter 
		 beans that are required for Spring MVC to dispatch requests to @Controllers. -->
	<!-- To enable usage of annotation such as @RestController and @GetMapping-->
	<!-- When annotation-driven is enabled, Spring container automatically scans for classes
	     under the package specified in <context:component-scan  -->
	<mvc:annotation-driven/>

	<!-- JSON Support, Seems JSON support is working by default -->
	<!-- http://www.jcombat.com/spring/spring-mvc-beannameviewresolver-example -->
	<!--<bean name="viewResolver" class="org.springframework.web.servlet.view.BeanNameViewResolver"/>-->

	<!-- Configure bean to convert JSON to POJO and vice versa -->
	<!--<bean id="jsonMessageConverter" class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter">-->
		<!--<property name="prettyPrint" value="true"/>-->
	<!--</bean>-->

	<beans profile="in-memory">
		<bean id="inMemoryDataConfig" class="com.gridu.microservice.taxes.service.DataInitializerService"></bean>
	</beans>
	<beans profile="entity-manager">
		<import resource="em-persinstence-context.xml"/>
		<bean id="entityManagerDataConfig" class="com.gridu.microservice.taxes.service.EntityManagerDataService"></bean>
	</beans>
</beans>